# NOTE: update this with your service name
service: pomafocus-api

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}  
  userstableName: ${self:custom.stage}-users
  projectstableName: ${self:custom.stage}-projects
  taskstableName: ${self:custom.stage}-tasks
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput:
    ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2

  environment:
    userstableName: ${self:custom.userstableName}
    projectstableName: ${self:custom.projectstableName}
    taskstableName: ${self:custom.taskstableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "Fn::GetAtt": [ UsersTable , Arn ]
        - "Fn::GetAtt": [ ProjectsTable , Arn ]
        - "Fn::GetAtt": [ TasksTable , Arn ]
functions:
  createUser:
    handler: userHandler.create
    events:
      - http:
          path: api/user
          method: post
          cors: true
          authorizer: aws_iam
  retrieveUser:
    handler: userHandler.retrieve
    events:
        - http:
            path: api/user/{id}
            method: get
            cors: true
            authorizer: aws_iam  
  deleteUser:
    handler: userHandler.deleteUser
    events:
      - http:
          path: api/user/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  updateUser:
    handler: userHandler.update
    events:
      - http:
          path: api/user/{id}
          method: put
          cors: true
          authorizer: aws_iam
  createProject:
    handler: projectHandler.create
    events:
      - http:
          path: api/project
          method: post
          cors: true
          authorizer: aws_iam
  retrieveProject:
    handler: projectHandler.retrieve
    events:
        - http:
            path: api/project/{id}
            method: get
            cors: true
            authorizer: aws_iam  
  deleteProject:
    handler: projectHandler.deleteProject
    events:
      - http:
          path: api/project/{id}
          method: delete
          cors: true
          authorizer: aws_iam 
  createTask:
    handler: taskHandler.create
    events:
      - http:
          path: api/task
          method: post
          cors: true
          authorizer: aws_iam
  retrieveTask:
    handler: taskHandler.retrieve
    events:
        - http:
            path: api/task/{id}
            method: get
            cors: true
            authorizer: aws_iam  
  deleteTask:
    handler: taskHandler.deleteTask
    events:
      - http:
          path: api/task/{id}
          method: delete
          cors: true
          authorizer: aws_iam 
resources:
  - ${file(infrastructure/dynamodb.yml)}
  - ${file(infrastructure/cognito-userPool.yml)}
  - ${file(infrastructure/cognito-identityPool.yml)}